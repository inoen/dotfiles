[
    {
        "domain": "base",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "enableDebugger",
                "description": "Attempt to enable the debugger",
                "parameters": [],
                "returns": []
            },
            {
                "name": "restartNode",
                "description": "Attempt to restart the Node server",
                "parameters": [],
                "returns": []
            },
            {
                "name": "loadDomainModulesFromPaths",
                "description": "Attempt to load command modules from the given paths. The paths should be absolute.",
                "parameters": [
                    {
                        "name": "paths",
                        "type": "array<string>"
                    }
                ],
                "returns": [
                    {
                        "name": "success",
                        "type": "boolean"
                    }
                ]
            }
        ],
        "events": [
            {
                "name": "log",
                "parameters": [
                    {
                        "name": "level",
                        "type": "string"
                    },
                    {
                        "name": "timestamp",
                        "type": "Date"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "newDomains",
                "parameters": []
            }
        ]
    },
    {
        "domain": "fileWatcher",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "watchPath",
                "description": "Start watching a file or directory",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to watch"
                    },
                    {
                        "name": "ignored",
                        "type": "array",
                        "description": "list of path to ignore"
                    }
                ]
            },
            {
                "name": "unwatchPath",
                "description": "Stop watching a single file or a directory and it's descendants",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to unwatch"
                    }
                ]
            },
            {
                "name": "unwatchAll",
                "description": "Stop watching all files and directories"
            }
        ],
        "events": [
            {
                "name": "change",
                "parameters": [
                    {
                        "name": "event",
                        "type": "string"
                    },
                    {
                        "name": "parentDirPath",
                        "type": "string"
                    },
                    {
                        "name": "entryName",
                        "type": "string"
                    },
                    {
                        "name": "statsObj",
                        "type": "object"
                    }
                ]
            }
        ]
    },
    {
        "domain": "launcher",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "launch",
                "description": "Launches a given HTML file in the browser for live development",
                "parameters": [
                    {
                        "name": "url",
                        "type": "string",
                        "description": "file:// url to the HTML file"
                    },
                    {
                        "name": "browser",
                        "type": "string",
                        "description": "browser name"
                    }
                ],
                "returns": []
            }
        ],
        "events": []
    },
    {
        "domain": "FindInFiles",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "doSearch",
                "description": "Searches in project files and returns matches",
                "parameters": [
                    {
                        "name": "searchObject",
                        "type": "object",
                        "description": "Object containing search data"
                    }
                ],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing results of the search"
                    }
                ]
            },
            {
                "name": "nextPage",
                "description": "get the next page of reults",
                "parameters": [],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing results of the search"
                    }
                ]
            },
            {
                "name": "getAllResults",
                "description": "get the next page of reults",
                "parameters": [],
                "returns": [
                    {
                        "name": "searchResults",
                        "type": "object",
                        "description": "Object containing all results of the search"
                    }
                ]
            },
            {
                "name": "collapseResults",
                "description": "get the next page of reults",
                "parameters": [
                    {
                        "name": "collapse",
                        "type": "boolean",
                        "description": "true to collapse"
                    }
                ],
                "returns": []
            },
            {
                "name": "filesChanged",
                "description": "files in the project has been changed, update cache",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "Object containing list of changed files"
                    }
                ],
                "returns": []
            },
            {
                "name": "documentChanged",
                "description": "informs that the document changed and updates the cache",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "update with the contents of the object"
                    }
                ],
                "returns": []
            },
            {
                "name": "filesRemoved",
                "description": "Searches in project files and returns matches",
                "parameters": [
                    {
                        "name": "updateObject",
                        "type": "object",
                        "description": "Object containing list of removed files"
                    }
                ],
                "returns": []
            },
            {
                "name": "initCache",
                "description": "Caches the project for find in files in node",
                "parameters": [
                    {
                        "name": "fileList",
                        "type": "Array",
                        "description": "List of all project files - Path only"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "crawlComplete",
                "parameters": [
                    {
                        "name": "numFiles",
                        "type": "number",
                        "description": "number of files cached"
                    },
                    {
                        "name": "cacheSize",
                        "type": "number",
                        "description": "The size of the file cache epressesd as string length of files"
                    }
                ]
            }
        ]
    },
    {
        "domain": "staticServer",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "_setRequestFilterTimeout",
                "description": "Unit tests only. Set timeout value for filtered requests.",
                "parameters": [
                    {
                        "name": "timeout",
                        "type": "number",
                        "description": "Duration to wait before passing a filtered request to the static file server."
                    }
                ],
                "returns": []
            },
            {
                "name": "getServer",
                "description": "Starts or returns an existing server for the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "Absolute filesystem path for root of server."
                    },
                    {
                        "name": "port",
                        "type": "number",
                        "description": "Port number to use for HTTP server.  Pass zero to assign a random port."
                    }
                ],
                "returns": [
                    {
                        "name": "address",
                        "type": "{address: string, family: string, port: number}",
                        "description": "hostname (stored in 'address' parameter), port, and socket type (stored in 'family' parameter) for the server. Currently, 'family' will always be 'IPv4'."
                    }
                ]
            },
            {
                "name": "closeServer",
                "description": "Closes the server for the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    }
                ],
                "returns": [
                    {
                        "name": "result",
                        "type": "boolean",
                        "description": "indicates whether a server was found for the specific path then closed"
                    }
                ]
            },
            {
                "name": "setRequestFilterPaths",
                "description": "Defines a set of paths from a server's root path to watch and fire 'requestFilter' events for.",
                "parameters": [
                    {
                        "name": "root",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    },
                    {
                        "name": "paths",
                        "type": "Array",
                        "description": "path to notify"
                    }
                ],
                "returns": []
            },
            {
                "name": "writeFilteredResponse",
                "description": "Overrides the server response from static middleware with the provided response data. This should be called only in response to a filtered request.",
                "parameters": [
                    {
                        "name": "root",
                        "type": "string",
                        "description": "absolute filesystem path for root of server"
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "description": "path to rewrite"
                    },
                    {
                        "name": "resData",
                        "type": "{body: string, headers: Array}",
                        "description": "TODO"
                    }
                ],
                "returns": []
            }
        ],
        "events": [
            {
                "name": "requestFilter",
                "parameters": [
                    {
                        "name": "location",
                        "type": "{hostname: string, pathname: string, port: number, root: string: id: number}",
                        "description": "request path"
                    }
                ]
            }
        ]
    },
    {
        "domain": "externalBeautify",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "beautify",
                "description": "beautify externally",
                "parameters": [
                    {
                        "name": "options",
                        "type": "object",
                        "description": "Options object with path"
                    },
                    {
                        "name": "filePath",
                        "type": "string",
                        "description": "Path to file."
                    }
                ],
                "returns": []
            }
        ],
        "events": []
    },
    {
        "domain": "zaggino.brackets-eslint",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "lintFile",
                "description": "lint given file with eslint",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "name": "useLocalESLint",
                        "type": "boolean"
                    }
                ],
                "returns": [
                    {
                        "name": "report",
                        "type": "object"
                    }
                ]
            },
            {
                "name": "fixFile",
                "description": "Fixes the current file using the ESLint auto-fixing feature",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    }
                ]
            }
        ],
        "events": []
    },
    {
        "domain": "TernNodeDomain",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "invokeTernCommand",
                "description": "Invokes a tern command on node",
                "parameters": [
                    {
                        "name": "commandConfig",
                        "type": "object",
                        "description": "Object containing tern command configuration"
                    }
                ]
            },
            {
                "name": "setInterface",
                "description": "Sets the shared message interface",
                "parameters": [
                    {
                        "name": "msgInterface",
                        "type": "object",
                        "description": "Object containing messageId enums"
                    }
                ]
            },
            {
                "name": "resetTernServer",
                "description": "Resets an existing tern server"
            }
        ],
        "events": [
            {
                "name": "data",
                "parameters": [
                    {
                        "name": "data",
                        "type": "Object",
                        "description": "data to be returned to main thread"
                    }
                ]
            }
        ]
    },
    {
        "domain": "sass",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [],
        "events": []
    },
    {
        "domain": "sass-v2.0.3",
        "version": null,
        "commands": [
            {
                "name": "render",
                "description": "Returns the path to an application",
                "parameters": [
                    {
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "name": "outFile",
                        "type": "string"
                    },
                    {
                        "name": "includePaths",
                        "type": "array"
                    },
                    {
                        "name": "imagePath",
                        "type": "string"
                    },
                    {
                        "name": "outputStyle",
                        "type": "string"
                    },
                    {
                        "name": "sourceComments",
                        "type": "boolean"
                    },
                    {
                        "name": "sourceMap",
                        "type": "string"
                    },
                    {
                        "name": "compiler",
                        "type": "string"
                    },
                    {
                        "name": "compass",
                        "type": "boolean"
                    }
                ]
            },
            {
                "name": "preview",
                "description": "Returns the path to an application",
                "parameters": [
                    {
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "name": "outFile",
                        "type": "string"
                    },
                    {
                        "name": "inMemoryFiles",
                        "type": "object"
                    },
                    {
                        "name": "includePaths",
                        "type": "array"
                    },
                    {
                        "name": "imagePath",
                        "type": "string"
                    },
                    {
                        "name": "outputStyle",
                        "type": "string"
                    },
                    {
                        "name": "sourceComments",
                        "type": "boolean"
                    },
                    {
                        "name": "sourceMap",
                        "type": "string"
                    },
                    {
                        "name": "compiler",
                        "type": "string"
                    },
                    {
                        "name": "compass",
                        "type": "boolean"
                    }
                ]
            },
            {
                "name": "deleteTempFiles",
                "description": "Delete temporary files used for Live Preview",
                "parameters": []
            },
            {
                "name": "mkdirp",
                "description": "Creates a directory. If the parent hierarchy doesn't exist, it's created. Like mkdir -p.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "setCompilerTimeout",
                "description": "Defines a compiler timeout",
                "parameters": [
                    {
                        "name": "timeout",
                        "type": "number"
                    }
                ]
            },
            {
                "name": "setTempDir",
                "description": "Set the temporary directory used for in-memory compiling",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "killProcess",
                "description": "Kill the compiler process",
                "parameters": []
            }
        ],
        "events": []
    }
]