[
    {
        "domain": "base",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "enableDebugger",
                "description": "Attempt to enable the debugger",
                "parameters": [],
                "returns": []
            },
            {
                "name": "restartNode",
                "description": "Attempt to restart the Node server",
                "parameters": [],
                "returns": []
            },
            {
                "name": "loadDomainModulesFromPaths",
                "description": "Attempt to load command modules from the given paths. The paths should be absolute.",
                "parameters": [
                    {
                        "name": "paths",
                        "type": "array<string>"
                    }
                ],
                "returns": [
                    {
                        "name": "success",
                        "type": "boolean"
                    }
                ]
            }
        ],
        "events": [
            {
                "name": "log",
                "parameters": [
                    {
                        "name": "level",
                        "type": "string"
                    },
                    {
                        "name": "timestamp",
                        "type": "Date"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "newDomains",
                "parameters": []
            }
        ]
    },
    {
        "domain": "zaggino.brackets-eslint",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "lintFile",
                "description": "lint given file with eslint",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "name": "useLocalESLint",
                        "type": "boolean"
                    }
                ],
                "returns": [
                    {
                        "name": "report",
                        "type": "object"
                    }
                ]
            },
            {
                "name": "fixFile",
                "description": "Fixes the current file using the ESLint auto-fixing feature",
                "parameters": [
                    {
                        "name": "projectRoot",
                        "type": "string"
                    },
                    {
                        "name": "fullPath",
                        "type": "string"
                    },
                    {
                        "name": "text",
                        "type": "string"
                    }
                ]
            }
        ],
        "events": []
    },
    {
        "domain": "fileWatcher",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "watchPath",
                "description": "Start watching a file or directory",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to watch"
                    },
                    {
                        "name": "ignored",
                        "type": "array",
                        "description": "list of path to ignore"
                    }
                ]
            },
            {
                "name": "unwatchPath",
                "description": "Stop watching a single file or a directory and it's descendants",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the file or directory to unwatch"
                    }
                ]
            },
            {
                "name": "unwatchAll",
                "description": "Stop watching all files and directories"
            }
        ],
        "events": [
            {
                "name": "change",
                "parameters": [
                    {
                        "name": "event",
                        "type": "string"
                    },
                    {
                        "name": "parentDirPath",
                        "type": "string"
                    },
                    {
                        "name": "entryName",
                        "type": "string"
                    },
                    {
                        "name": "statsObj",
                        "type": "object"
                    }
                ]
            }
        ]
    },
    {
        "domain": "TernNodeDomain",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "invokeTernCommand",
                "description": "Invokes a tern command on node",
                "parameters": [
                    {
                        "name": "commandConfig",
                        "type": "object",
                        "description": "Object containing tern command configuration"
                    }
                ]
            },
            {
                "name": "setInterface",
                "description": "Sets the shared message interface",
                "parameters": [
                    {
                        "name": "msgInterface",
                        "type": "object",
                        "description": "Object containing messageId enums"
                    }
                ]
            },
            {
                "name": "resetTernServer",
                "description": "Resets an existing tern server"
            }
        ],
        "events": [
            {
                "name": "data",
                "parameters": [
                    {
                        "name": "data",
                        "type": "Object",
                        "description": "data to be returned to main thread"
                    }
                ]
            }
        ]
    },
    {
        "domain": "extensionManager",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "validate",
                "description": "Verifies that the contents of the given ZIP file are a valid Brackets extension package",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "options",
                        "type": "{requirePackageJSON: ?boolean}",
                        "description": "options to control the behavior of the validator"
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    }
                ]
            },
            {
                "name": "install",
                "description": "Installs the given Brackets extension if it is valid (runs validation command automatically)",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "destinationDirectory",
                        "type": "string",
                        "description": "absolute filesystem path where this extension should be installed"
                    },
                    {
                        "name": "options",
                        "type": "{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string, proxy: ?string}",
                        "description": "installation options: disabledDirectory should be set so that extensions can be installed disabled."
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    },
                    {
                        "name": "disabledReason",
                        "type": "string",
                        "description": "reason this extension was installed disabled (one of Errors.*), none if it was enabled"
                    },
                    {
                        "name": "installationStatus",
                        "type": "string",
                        "description": "Current status of the installation (an extension can be valid but not installed because it's an update"
                    },
                    {
                        "name": "installedTo",
                        "type": "string",
                        "description": "absolute path where the extension was installed to"
                    },
                    {
                        "name": "commonPrefix",
                        "type": "string",
                        "description": "top level directory in the package zip which contains all of the files"
                    }
                ]
            },
            {
                "name": "update",
                "description": "Updates the given Brackets extension (for which install was generally previously attemped). Brackets must be quit after this.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the extension package"
                    },
                    {
                        "name": "destinationDirectory",
                        "type": "string",
                        "description": "absolute filesystem path where this extension should be installed"
                    },
                    {
                        "name": "options",
                        "type": "{disabledDirectory: !string, apiVersion: !string, nameHint: ?string, systemExtensionDirectory: !string}",
                        "description": "installation options: disabledDirectory should be set so that extensions can be installed disabled."
                    }
                ],
                "returns": [
                    {
                        "name": "errors",
                        "type": "string|Array.<string>",
                        "description": "download error, if any; first string is error code (one of Errors.*); subsequent strings are additional info"
                    },
                    {
                        "name": "metadata",
                        "type": "{name: string, version: string}",
                        "description": "all package.json metadata (null if there's no package.json)"
                    },
                    {
                        "name": "disabledReason",
                        "type": "string",
                        "description": "reason this extension was installed disabled (one of Errors.*), none if it was enabled"
                    },
                    {
                        "name": "installationStatus",
                        "type": "string",
                        "description": "Current status of the installation (an extension can be valid but not installed because it's an update"
                    },
                    {
                        "name": "installedTo",
                        "type": "string",
                        "description": "absolute path where the extension was installed to"
                    },
                    {
                        "name": "commonPrefix",
                        "type": "string",
                        "description": "top level directory in the package zip which contains all of the files"
                    }
                ]
            },
            {
                "name": "remove",
                "description": "Removes the Brackets extension at the given path.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string",
                        "description": "absolute filesystem path of the installed extension folder"
                    }
                ],
                "returns": {}
            },
            {
                "name": "downloadFile",
                "description": "Downloads the file at the given URL, saving it to a temp location. Callback receives path to the downloaded file.",
                "parameters": [
                    {
                        "name": "downloadId",
                        "type": "string",
                        "description": "Unique identifier for this download 'session'"
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "description": "URL to download from"
                    },
                    {
                        "name": "proxy",
                        "type": "string",
                        "description": "optional proxy URL"
                    }
                ],
                "returns": {
                    "type": "string",
                    "description": "Local path to the downloaded file"
                }
            },
            {
                "name": "abortDownload",
                "description": "Aborts any pending download with the given id. Ignored if no download pending (may be already complete).",
                "parameters": [
                    {
                        "name": "downloadId",
                        "type": "string",
                        "description": "Unique identifier for this download 'session', previously pased to downloadFile"
                    }
                ],
                "returns": {
                    "type": "boolean",
                    "description": "True if the download was pending and able to be canceled; false otherwise"
                }
            }
        ],
        "events": []
    },
    {
        "domain": "sass",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [],
        "events": []
    },
    {
        "domain": "sass-v2.0.3",
        "version": null,
        "commands": [
            {
                "name": "render",
                "description": "Returns the path to an application",
                "parameters": [
                    {
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "name": "outFile",
                        "type": "string"
                    },
                    {
                        "name": "includePaths",
                        "type": "array"
                    },
                    {
                        "name": "imagePath",
                        "type": "string"
                    },
                    {
                        "name": "outputStyle",
                        "type": "string"
                    },
                    {
                        "name": "sourceComments",
                        "type": "boolean"
                    },
                    {
                        "name": "sourceMap",
                        "type": "string"
                    },
                    {
                        "name": "compiler",
                        "type": "string"
                    },
                    {
                        "name": "compass",
                        "type": "boolean"
                    }
                ]
            },
            {
                "name": "preview",
                "description": "Returns the path to an application",
                "parameters": [
                    {
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "name": "outFile",
                        "type": "string"
                    },
                    {
                        "name": "inMemoryFiles",
                        "type": "object"
                    },
                    {
                        "name": "includePaths",
                        "type": "array"
                    },
                    {
                        "name": "imagePath",
                        "type": "string"
                    },
                    {
                        "name": "outputStyle",
                        "type": "string"
                    },
                    {
                        "name": "sourceComments",
                        "type": "boolean"
                    },
                    {
                        "name": "sourceMap",
                        "type": "string"
                    },
                    {
                        "name": "compiler",
                        "type": "string"
                    },
                    {
                        "name": "compass",
                        "type": "boolean"
                    }
                ]
            },
            {
                "name": "deleteTempFiles",
                "description": "Delete temporary files used for Live Preview",
                "parameters": []
            },
            {
                "name": "mkdirp",
                "description": "Creates a directory. If the parent hierarchy doesn't exist, it's created. Like mkdir -p.",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "setCompilerTimeout",
                "description": "Defines a compiler timeout",
                "parameters": [
                    {
                        "name": "timeout",
                        "type": "number"
                    }
                ]
            },
            {
                "name": "setTempDir",
                "description": "Set the temporary directory used for in-memory compiling",
                "parameters": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ]
            },
            {
                "name": "killProcess",
                "description": "Kill the compiler process",
                "parameters": []
            }
        ],
        "events": []
    },
    {
        "domain": "externalBeautify",
        "version": {
            "major": 0,
            "minor": 1
        },
        "commands": [
            {
                "name": "beautify",
                "description": "beautify externally",
                "parameters": [
                    {
                        "name": "options",
                        "type": "object",
                        "description": "Options object with path"
                    },
                    {
                        "name": "filePath",
                        "type": "string",
                        "description": "Path to file."
                    }
                ],
                "returns": []
            }
        ],
        "events": []
    }
]